@page "/admin/play/{uid}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using PlayPointPlaylist.Services
@using PlayPointPlaylist.Models
@using Microsoft.JSInterop
@inject QueueService QueueService
@inject EventService EventService
@inject AdminAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Host-Steuerung</PageTitle>

<div class="container-fluid py-4">
@if (currentEvent == null)
{
    <div class="alert alert-danger">
        <i class="bi bi-exclamation-triangle me-2"></i>Event nicht gefunden!
    </div>
}
else
{
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3 mb-0">
                        <i class="bi bi-play-circle me-2"></i>Host-Steuerung: @currentEvent.Name
                    </h1>
                    <div>
                        @if (isAuthenticated)
                        {
                            <button class="btn btn-outline-warning me-2" @onclick="HandleLogout">
                                <i class="bi bi-box-arrow-right me-2"></i>Abmelden
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-primary me-2" @onclick="ToggleLoginModal">
                                <i class="bi bi-box-arrow-in-right me-2"></i>Anmelden
                            </button>
                        }
                    </div>
                </div>
                
                <div class="card shadow mb-4">
                    <div class="card-header bg-primary text-white py-3">
                        <h5 class="mb-0">
                            <i class="bi bi-music-note-beamed me-2"></i>Aktueller Song
                        </h5>
                    </div>
                    <div class="card-body p-4">
                        @if (currentSong != null)
                        {
                            <div class="row">
                                <div class="col-lg-6 mb-4 mb-lg-0">
                                    <h4 class="mb-2">@currentSong.Title</h4>
                                    <p class="text-muted mb-3">
                                        <i class="bi bi-person-circle me-1"></i>@currentSong.Artist
                                        <span class="mx-2">•</span>
                                        <i class="bi bi-clock me-1"></i>@FormatDuration(currentSong.DurationSeconds)
                                    </p>
                                    @if (!string.IsNullOrEmpty(currentSong.RequestedBy))
                                    {
                                        <p class="text-muted">
                                            <i class="bi bi-person-fill me-1"></i>Gewünscht von: <strong>@currentSong.RequestedBy</strong>
                                        </p>
                                    }
                                    @if (isAuthenticated)
                                    {
                                        <button class="btn btn-warning btn-lg mb-3" @onclick="SkipSong">
                                            <i class="bi bi-skip-forward-fill me-2"></i>Nächster Song
                                        </button>
                                    }
                                    
                                    @* Progress Bar *@
                                    <div class="progress mb-2" style="height: 8px;">
                                        <div class="progress-bar bg-primary" 
                                             role="progressbar" 
                                             style="width: @currentProgress%"
                                             aria-valuenow="@currentProgress" 
                                             aria-valuemin="0" 
                                             aria-valuemax="100">
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <small class="text-muted">@currentTimeDisplay</small>
                                        <small class="text-muted">@FormatDuration(currentSong.DurationSeconds)</small>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="ratio ratio-16x9">
                                        <div id="youtube-player" class="rounded"></div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5 text-muted">
                                <i class="bi bi-music-note display-1 mb-3 d-block"></i>
                                <h4>Keine Songs in der Warteschlange</h4>
                                <p>Warte auf Anfragen von der Playlist-Seite.</p>
                            </div>
                        }
                    </div>
                </div>
                
                <div class="card shadow">
                    <div class="card-header bg-white py-3">
                        <h5 class="mb-0">
                            <i class="bi bi-list-ul me-2"></i>Warteschlange
                            <span class="badge bg-primary ms-2">@upcomingSongs.Count</span>
                        </h5>
                    </div>
                    <div class="card-body p-0">
                        @if (upcomingSongs.Any())
                        {
                            <div class="list-group list-group-flush" style="max-height: 500px; overflow-y: auto;">
                                @foreach (var song in upcomingSongs)
                                {
                                    <div class="list-group-item">
                                        <div class="d-flex align-items-center">
                                            <div class="flex-shrink-0 me-3">
                                                <span class="badge bg-primary rounded-pill fs-6">
                                                    @song.PlayOrder
                                                </span>
                                            </div>
                                            <div class="flex-grow-1">
                                                <h6 class="mb-1">@song.Title</h6>
                                                <small class="text-muted">
                                                    @song.Artist <span class="mx-2">•</span> @FormatDuration(song.DurationSeconds)
                                                </small>
                                            </div>
                                            @if (isAuthenticated)
                                            {
                                                <div class="flex-shrink-0">
                                                    <button class="btn btn-sm btn-outline-danger" 
                                                            @onclick="() => RemoveSong(song.Id)"
                                                            title="Entfernen">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5 text-muted">
                                <p class="mb-0">Keine weiteren Songs in der Warteschlange.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    
    @* Login Modal *@
    @if (showLoginModal)
    {
        <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi bi-shield-lock me-2"></i>Host-Login
                        </h5>
                        <button type="button" class="btn-close" @onclick="ToggleLoginModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                            <div class="mb-3">
                                <label class="form-label">Passwort</label>
                                <InputText type="password" @bind-Value="loginModel.Password" 
                                           class="form-control form-control-lg" 
                                           placeholder="Passwort eingeben" />
                            </div>
                            @if (!string.IsNullOrEmpty(loginErrorMessage))
                            {
                                <div class="alert alert-danger">
                                    <i class="bi bi-exclamation-triangle me-2"></i>@loginErrorMessage
                                </div>
                            }
                            <button type="submit" class="btn btn-primary w-100 btn-lg">
                                <i class="bi bi-box-arrow-in-right me-2"></i>Einloggen
                            </button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
[Parameter]
public string Uid { get; set; } = string.Empty;
    
private bool isAuthenticated = false;
private Event? currentEvent;
private QueueItem? currentSong;
private List<QueueItem> upcomingSongs = new();
private System.Threading.Timer? refreshTimer;
    
// Login modal
private bool showLoginModal = false;
private string loginErrorMessage = string.Empty;
private LoginModel loginModel = new();
    
    // Track current video to avoid reloading
    private string? currentVideoId = null;
    private bool wasAuthenticated = false;
    private DotNetObjectReference<HostPlay>? dotNetHelper;
    
    // Progress tracking
    private double currentProgress = 0;
    private string currentTimeDisplay = "0:00";
    private System.Threading.Timer? progressTimer;
    
    protected override async Task OnInitializedAsync()
    {
        // Check if user is authenticated
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        wasAuthenticated = isAuthenticated;
        
        currentEvent = await EventService.GetEventByUniqueId(Uid);
        await LoadQueue();
        
        // Create .NET object reference for JavaScript callbacks
        dotNetHelper = DotNetObjectReference.Create(this);
        
        // Auto-refresh queue every 3 seconds
        refreshTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadQueue();
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(3), TimeSpan.FromSeconds(3));
        
        // Update progress bar every 500ms
        progressTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await UpdateProgress();
            });
        }, null, TimeSpan.FromMilliseconds(500), TimeSpan.FromMilliseconds(500));
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && dotNetHelper != null)
        {
            // Register the .NET helper with JavaScript
            await JSRuntime.InvokeVoidAsync("setDotNetHelper", dotNetHelper);
        }
        
        if (currentSong != null && currentSong.YouTubeVideoId != currentVideoId)
        {
            // New song - load it
            currentVideoId = currentSong.YouTubeVideoId;
            await JSRuntime.InvokeVoidAsync("initializeYouTubePlayer", currentVideoId, !isAuthenticated);
        }
        else if (wasAuthenticated != isAuthenticated && currentSong != null)
        {
            // Auth state changed - update controls visibility (for next video)
            wasAuthenticated = isAuthenticated;
            await JSRuntime.InvokeVoidAsync("updateYouTubePlayerControls", !isAuthenticated);
        }
    }
    
    [JSInvokable]
    public async Task OnVideoEnded()
    {
        // Automatically skip to next song when current one ends
        await SkipSong();
    }
    
    private async Task UpdateProgress()
    {
        if (currentSong != null)
        {
            try
            {
                var timeData = await JSRuntime.InvokeAsync<double[]>("getPlayerTime");
                if (timeData != null && timeData.Length == 2)
                {
                    var currentTime = timeData[0];
                    var duration = timeData[1];
                    
                    if (duration > 0)
                    {
                        currentProgress = (currentTime / duration) * 100;
                        currentTimeDisplay = FormatDuration((int)currentTime);
                        StateHasChanged();
                    }
                }
            }
            catch
            {
                // Player not ready yet or error getting time
            }
        }
        else
        {
            currentProgress = 0;
            currentTimeDisplay = "0:00";
        }
    }
    
    private async Task LoadQueue()
    {
        var allSongs = await QueueService.GetPlaylistForEvent(Uid);
        currentSong = allSongs.FirstOrDefault(s => !s.IsPlayed);
        upcomingSongs = allSongs.Where(s => !s.IsPlayed && s.Id != currentSong?.Id).ToList();
    }
    
    private async Task SkipSong()
    {
        if (currentSong != null)
        {
            await QueueService.MarkAsPlayed(currentSong.Id);
            currentVideoId = null; // Reset to trigger new video load
            await LoadQueue();
        }
    }
    
    private async Task RemoveSong(int songId)
    {
        if (isAuthenticated)
        {
            await QueueService.RemoveSong(songId);
            await LoadQueue();
        }
    }
    
    private void ToggleLoginModal()
    {
        showLoginModal = !showLoginModal;
        loginErrorMessage = string.Empty;
        loginModel.Password = string.Empty;
    }
    
    private async Task HandleLogin()
    {
        var success = await AuthService.LoginAsync(loginModel.Password);
        
        if (success)
        {
            isAuthenticated = true;
            loginErrorMessage = string.Empty;
            loginModel.Password = string.Empty;
            showLoginModal = false;
            // Don't reset currentVideoId - player will keep playing
        }
        else
        {
            loginErrorMessage = "Falsches Passwort!";
        }
    }
    
    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        isAuthenticated = false;
        // Don't reset currentVideoId - player will keep playing
        StateHasChanged();
    }
    
    private string FormatDuration(int seconds)
    {
        var ts = TimeSpan.FromSeconds(seconds);
        return $"{(int)ts.TotalMinutes}:{ts.Seconds:D2}";
    }
    
    public async ValueTask DisposeAsync()
    {
        refreshTimer?.Dispose();
        progressTimer?.Dispose();
        
        // Dispose .NET object reference
        dotNetHelper?.Dispose();
        
        // Stop the YouTube player when leaving the page
        try
        {
            await JSRuntime.InvokeVoidAsync("stopYouTubePlayer");
        }
        catch
        {
            // Ignore errors during dispose
        }
    }
    
    private class LoginModel
    {
        public string Password { get; set; } = string.Empty;
    }
}

