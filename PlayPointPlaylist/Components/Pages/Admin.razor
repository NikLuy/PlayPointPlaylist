@page "/admin"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using PlayPointPlaylist.Services
@using PlayPointPlaylist.Models
@inject EventService EventService
@inject QueueService QueueService
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

<PageTitle>Admin - PlayPointPlaylist</PageTitle>

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0"><i class="bi bi-shield-lock me-2"></i>Admin-Bereich</h1>
                <a href="/" class="btn btn-outline-secondary">
                    <i class="bi bi-house me-2"></i>Zurück
                </a>
            </div>
            
            @if (!isAuthenticated)
            {
                <div class="row justify-content-center">
                    <div class="col-md-6">
                        <div class="card shadow">
                            <div class="card-body p-4">
                                <h5 class="card-title mb-4">Admin-Login</h5>
                                <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                                    <div class="mb-3">
                                        <label class="form-label">Passwort</label>
                                        <InputText type="password" @bind-Value="loginModel.Password" 
                                                   class="form-control form-control-lg" 
                                                   placeholder="Passwort eingeben" />
                                    </div>
                                    @if (!string.IsNullOrEmpty(errorMessage))
                                    {
                                        <div class="alert alert-danger">
                                            <i class="bi bi-exclamation-triangle me-2"></i>@errorMessage
                                        </div>
                                    }
                                    <button type="submit" class="btn btn-primary w-100 btn-lg">
                                        <i class="bi bi-box-arrow-in-right me-2"></i>Einloggen
                                    </button>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card shadow mb-4">
                    <div class="card-body p-4">
                        <h5 class="card-title mb-4"><i class="bi bi-plus-circle me-2"></i>Neues Event erstellen</h5>
                        
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success alert-dismissible fade show">
                                <i class="bi bi-check-circle me-2"></i>@successMessage
                                <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                            </div>
                        }
                        
                        @if (!string.IsNullOrEmpty(errorMessage) && isAuthenticated)
                        {
                            <div class="alert alert-danger alert-dismissible fade show">
                                <i class="bi bi-exclamation-triangle me-2"></i>@errorMessage
                                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                            </div>
                        }
                        
                        <div class="row g-3">
                            <div class="col-md-9">
                                <input type="text" 
                                       @bind="newEventModel.Name" 
                                       @bind:event="oninput"
                                       class="form-control form-control-lg" 
                                       placeholder="Event-Name (z.B. Jugenddisco 20.10.2025)" 
                                       @onkeydown="HandleKeyPress" />
                            </div>
                            <div class="col-md-3">
                                <button type="button" 
                                        class="btn btn-success w-100 btn-lg" 
                                        @onclick="@(async () => { Console.WriteLine("Button clicked!"); await CreateNewEvent(); })">
                                    <i class="bi bi-plus-lg me-2"></i>Erstellen
                                </button>
                            </div>
                        </div>
                        
                        <div class="mt-3">
                            <small class="text-muted">
                                Debug: isAuthenticated=@isAuthenticated, 
                                events=@(events?.Count ?? 0), 
                                Name='@newEventModel.Name'
                            </small>
                        </div>
                    </div>
                </div>
                
                @if (events == null)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Lade Events...</span>
                        </div>
                    </div>
                }
                else if (!events.Any())
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>Noch keine Events vorhanden. Erstelle dein erstes Event!
                    </div>
                }
                else
                {
                    <div class="card shadow">
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Name</th>
                                            <th>URL-Code</th>
                                            <th>Status</th>
                                            <th class="text-center">Songs</th>
                                            <th class="text-end">Aktionen</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var evt in events)
                                        {
                                            <tr>
                                                <td class="align-middle">
                                                    <strong>@evt.Name</strong>
                                                </td>
                                                <td class="align-middle">
                                                    <code class="text-primary">@evt.UniqueId</code>
                                                </td>
                                                <td class="align-middle">
                                                    <span class="badge @(evt.IsActive ? "bg-success" : "bg-secondary")">
                                                        @(evt.IsActive ? "Aktiv" : "Inaktiv")
                                                    </span>
                                                </td>
                                                <td class="align-middle text-center">
                                                    <span class="badge bg-primary">@evt.Playlist.Count</span>
                                                </td>
                                                <td class="align-middle text-end">
                                                    <div class="btn-group" role="group">
                                                        <a href="/playlist/@evt.UniqueId" 
                                                           class="btn btn-sm btn-outline-primary" 
                                                           target="_blank" 
                                                           title="Zur Playlist">
                                                            <i class="bi bi-music-note-list"></i>
                                                        </a>
                                                        <a href="/admin/play/@evt.UniqueId" 
                                                           class="btn btn-sm btn-outline-success"
                                                           title="Host-Steuerung">
                                                            <i class="bi bi-play-circle"></i>
                                                        </a>
                                                        <button class="btn btn-sm btn-outline-info" 
                                                                @onclick="() => ShowPlaylistManager(evt)"
                                                                title="Playlist verwalten">
                                                            <i class="bi bi-list-stars"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-warning" 
                                                                @onclick="() => ToggleStatus(evt.Id)"
                                                                title="@(evt.IsActive ? "Deaktivieren" : "Aktivieren")">
                                                            <i class="bi bi-power"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-danger" 
                                                                @onclick="() => DeleteEvent(evt.Id)"
                                                                title="Löschen">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
                
                @if (showPlaylistModal && selectedEvent != null)
                {
                    <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                        <div class="modal-dialog modal-lg modal-dialog-scrollable">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">
                                        <i class="bi bi-list-stars me-2"></i>Playlist verwalten: @selectedEvent.Name
                                    </h5>
                                    <button type="button" class="btn-close" @onclick="ClosePlaylistManager"></button>
                                </div>
                                <div class="modal-body">
                                    @if (playlistItems == null)
                                    {
                                        <div class="text-center py-4">
                                            <div class="spinner-border text-primary"></div>
                                        </div>
                                    }
                                    else if (!playlistItems.Any())
                                    {
                                        <div class="text-center py-4 text-muted">
                                            <i class="bi bi-music-note display-4 d-block mb-3"></i>
                                            <p>Keine Songs in der Playlist</p>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="list-group">
                                            @foreach (var item in playlistItems.OrderBy(p => p.PlayOrder))
                                            {
                                                <div class="list-group-item @(item.IsPlayed ? "bg-light" : "")">
                                                    <div class="d-flex align-items-center">
                                                        <div class="flex-shrink-0 me-3">
                                                            <div class="btn-group-vertical" role="group">
                                                                <button class="btn btn-sm btn-outline-secondary" 
                                                                        @onclick="() => MoveSongUp(item)"
                                                                        disabled="@(item.PlayOrder == 1)"
                                                                        title="Nach oben">
                                                                    <i class="bi bi-arrow-up"></i>
                                                                </button>
                                                                <button class="btn btn-sm btn-outline-secondary" 
                                                                        @onclick="() => MoveSongDown(item)"
                                                                        disabled="@(item.PlayOrder == playlistItems.Max(p => p.PlayOrder))"
                                                                        title="Nach unten">
                                                                    <i class="bi bi-arrow-down"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                        <div class="flex-shrink-0 me-3">
                                                            <span class="badge @(item.IsPlayed ? "bg-secondary" : "bg-primary") rounded-pill fs-6">
                                                                @item.PlayOrder
                                                            </span>
                                                        </div>
                                                        <div class="flex-grow-1">
                                                            <h6 class="mb-1 @(item.IsPlayed ? "text-decoration-line-through" : "")">
                                                                @item.Title
                                                            </h6>
                                                            <small class="text-muted">
                                                                @item.Artist
                                                                <span class="mx-2"></span>
                                                                @FormatDuration(item.DurationSeconds)
                                                                @if (!string.IsNullOrEmpty(item.RequestedBy))
                                                                {
                                                                    <span class="mx-2"></span>
                                                                    <i class="bi bi-person-fill"></i> @item.RequestedBy
                                                                }
                                                                @if (!item.IsPlayed && (item.UpVotes > 0 || item.DownVotes > 0))
                                                                {
                                                                    <span class="mx-2"></span>
                                                                    <i class="bi bi-hand-thumbs-up-fill text-success"></i> @item.UpVotes
                                                                    <span class="mx-1">|</span>
                                                                    <i class="bi bi-hand-thumbs-down-fill text-danger"></i> @item.DownVotes
                                                                }
                                                            </small>
                                                        </div>
                                                        <div class="flex-shrink-0">
                                                            @if (item.IsPlayed)
                                                            {
                                                                <span class="badge bg-secondary me-2">
                                                                    <i class="bi bi-check-circle"></i> Gespielt
                                                                </span>
                                                            }
                                                            <button class="btn btn-sm btn-outline-danger" 
                                                                    @onclick="() => DeleteSongFromPlaylist(item.Id)"
                                                                    title="Löschen">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" @onclick="ClosePlaylistManager">
                                        Schließen
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
private bool isAuthenticated = false;
private string errorMessage = string.Empty;
private string successMessage = string.Empty;
private LoginModel loginModel = new();
private NewEventModel newEventModel = new();
private List<Event> events = new();
    
// Playlist Manager
private bool showPlaylistModal = false;
private Event? selectedEvent;
private List<QueueItem> playlistItems = new();
    
// Simple in-memory authentication (for demo purposes)
// In production, use proper authentication with cookies/JWT
private static readonly Dictionary<string, DateTime> AuthSessions = new();
private static readonly TimeSpan SessionTimeout = TimeSpan.FromHours(2);
private string sessionId = string.Empty;
    
protected override async Task OnInitializedAsync()
{
    // Generate or retrieve session ID
    sessionId = Guid.NewGuid().ToString();
        
    // Check if there's an active authenticated session
    CheckAuthentication();
        
    if (isAuthenticated)
    {
        await LoadEvents();
    }
}
    
private void CheckAuthentication()
{
    // Clean up expired sessions
    var expiredSessions = AuthSessions.Where(s => DateTime.UtcNow - s.Value > SessionTimeout).ToList();
    foreach (var expired in expiredSessions)
    {
        AuthSessions.Remove(expired.Key);
    }
        
    // Check if any active session exists (simple approach for demo)
    isAuthenticated = AuthSessions.Any(s => DateTime.UtcNow - s.Value <= SessionTimeout);
}
    
private async Task HandleLogin()
{
    var adminPassword = Configuration["AdminSettings:Password"];
    if (loginModel.Password == adminPassword)
    {
        isAuthenticated = true;
        errorMessage = string.Empty;
            
        // Store authenticated session
        sessionId = Guid.NewGuid().ToString();
        AuthSessions[sessionId] = DateTime.UtcNow;
            
        await LoadEvents();
    }
    else
    {
        errorMessage = "Falsches Passwort!";
    }
}
    
    private async Task LoadEvents()
    {
        events = await EventService.GetAllEvents();
    }
    
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        Console.WriteLine($"Key pressed: {e.Key}");
        if (e.Key == "Enter")
        {
            Console.WriteLine("Enter key detected, calling CreateNewEvent...");
            await CreateNewEvent();
        }
    }
    
    private async Task CreateNewEvent()
    {
        Console.WriteLine("=== CreateNewEvent called! ===");
        Console.WriteLine($"Event Name: '{newEventModel.Name}'");
        
        try
        {
            if (string.IsNullOrWhiteSpace(newEventModel.Name))
            {
                Console.WriteLine("Validation failed: Empty name");
                errorMessage = "Bitte gib einen Event-Namen ein!";
                successMessage = string.Empty;
                StateHasChanged();
                return;
            }
            
            Console.WriteLine("Calling EventService.CreateEvent...");
            var createdEvent = await EventService.CreateEvent(newEventModel.Name);
            Console.WriteLine($"Event created: {createdEvent.Id} - {createdEvent.UniqueId}");
            
            successMessage = $"Event '{createdEvent.Name}' erfolgreich erstellt! URL-Code: {createdEvent.UniqueId}";
            errorMessage = string.Empty;
            newEventModel.Name = string.Empty;
            
            Console.WriteLine("Loading events...");
            await LoadEvents();
            Console.WriteLine($"Events loaded: {events.Count}");
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR: {ex.Message}");
            Console.WriteLine($"Stack: {ex.StackTrace}");
            errorMessage = $"Fehler beim Erstellen: {ex.Message}";
            successMessage = string.Empty;
            StateHasChanged();
        }
    }
    
    private async Task ToggleStatus(int eventId)
    {
        await EventService.ToggleEventStatus(eventId);
        await LoadEvents();
    }
    
    private async Task DeleteEvent(int eventId)
    {
        await EventService.DeleteEvent(eventId);
        await LoadEvents();
    }
    
    // Playlist Manager Methods
    private async Task ShowPlaylistManager(Event evt)
    {
        selectedEvent = evt;
        showPlaylistModal = true;
        await LoadPlaylist();
    }
    
    private void ClosePlaylistManager()
    {
        showPlaylistModal = false;
        selectedEvent = null;
        playlistItems.Clear();
    }
    
    private async Task LoadPlaylist()
    {
        if (selectedEvent != null)
        {
            playlistItems = await QueueService.GetPlaylistForEvent(selectedEvent.UniqueId);
        }
    }
    
    private async Task MoveSongUp(QueueItem item)
    {
        var sorted = playlistItems.OrderBy(p => p.PlayOrder).ToList();
        var currentIndex = sorted.FindIndex(s => s.Id == item.Id);
        
        if (currentIndex > 0)
        {
            var previousItem = sorted[currentIndex - 1];
            
            // Swap PlayOrder
            var tempOrder = item.PlayOrder;
            item.PlayOrder = previousItem.PlayOrder;
            previousItem.PlayOrder = tempOrder;
            
            await QueueService.UpdatePlayOrder(item.Id, item.PlayOrder);
            await QueueService.UpdatePlayOrder(previousItem.Id, previousItem.PlayOrder);
            
            await LoadPlaylist();
            await LoadEvents(); // Refresh event list to update song count
        }
    }
    
    private async Task MoveSongDown(QueueItem item)
    {
        var sorted = playlistItems.OrderBy(p => p.PlayOrder).ToList();
        var currentIndex = sorted.FindIndex(s => s.Id == item.Id);
        
        if (currentIndex < sorted.Count - 1)
        {
            var nextItem = sorted[currentIndex + 1];
            
            // Swap PlayOrder
            var tempOrder = item.PlayOrder;
            item.PlayOrder = nextItem.PlayOrder;
            nextItem.PlayOrder = tempOrder;
            
            await QueueService.UpdatePlayOrder(item.Id, item.PlayOrder);
            await QueueService.UpdatePlayOrder(nextItem.Id, nextItem.PlayOrder);
            
            await LoadPlaylist();
            await LoadEvents(); // Refresh event list to update song count
        }
    }
    
    private async Task DeleteSongFromPlaylist(int songId)
    {
        await QueueService.RemoveSong(songId);
        await LoadPlaylist();
        await LoadEvents(); // Refresh event list to update song count
    }
    
    private string FormatDuration(int seconds)
    {
        var ts = TimeSpan.FromSeconds(seconds);
        return $"{(int)ts.TotalMinutes}:{ts.Seconds:D2}";
    }
    
    private class LoginModel
    {
        public string Password { get; set; } = string.Empty;
    }
    
    private class NewEventModel
    {
        public string Name { get; set; } = string.Empty;
    }
}

